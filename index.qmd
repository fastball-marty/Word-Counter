---
title: Word Counter for Text Comparisons
author: "@emmacarl7"
format:
    html:
        theme: cosmos
        toc: true
        html-math-method: katex
        embed-resources: true
        copy-code: true
---

<head>
<style>
  table {
    width: 80%;
    border-collapse: collapse;
    margin: 20px;
  }
  th, td {
    padding: 12px;
    text-align: left;
    border: 1px solid #ddd; 
  }
  th {
    background-color: #f2f2f2;
  }
  td + td {
    padding-left: 20px;
  }
  </style>
</head>

```{python}
#| eval: true
#| echo: false
from src.wordcounter import word_count, format_output, compare_dictionaries
from src.sentiment import get_sentiment, sentiment_analysis, average_sentiment

# pamela all
pamela_dictionary = word_count('assets/pamela.txt', False)
pamela_sum = sum(pamela_dictionary.values())
pamela_string = format_output(pamela_dictionary, 100)

# crusoe all
crusoe_dictionary = word_count('assets/crusoe.txt', False)
crusoe_sum = sum(crusoe_dictionary.values())
crusoe_string = format_output(crusoe_dictionary, 100)

# pamela filtered
filtered_pamela_dictionary = word_count('assets/pamela.txt', True)
filtered_pamela_string = format_output(filtered_pamela_dictionary, 100)

# crusoe filtered
filtered_crusoe_dictionary = word_count('assets/crusoe.txt', True)
filtered_crusoe_string = format_output(filtered_crusoe_dictionary, 100)

# compare texts
pamela_exclusive, crusoe_exclusive = compare_dictionaries(pamela_dictionary, crusoe_dictionary)

# pamela sentiment
truncated_pamela = pamela_exclusive[:100]
pamela_sentiment = get_sentiment(truncated_pamela)

# crusoe sentiment
truncated_crusoe = crusoe_exclusive[:100]
crusoe_sentiment = get_sentiment(truncated_crusoe)

# sentiment averages
pamela_avg = average_sentiment(pamela_sentiment)
crusoe_avg = average_sentiment(crusoe_sentiment)
```

### Overview

Below is a word counter that compares the frequency of words in *Pamela; or, Virtue Rewarded* by Samuel Richardson to *The Life and Adventures of Robinson Crusoe* by Daniel Defoe. There are two separate counters: one includes every word, and the other filters out common words (i.e. and, the, to, very, must). **For sanity, only the first 100 words are presented.**

Also included is a table to display words exclusive to each novel, to display the unique vocabularies both implement. Again, **only the first 100 words are presented.**

Both text are in the public domain, and this script is intended for educational and research purposes in accordance with fair use guidelines. Both texts provided by Project Gutenberg, located below:

Pamela: <a href="https://www.gutenberg.org/cache/epub/6124/pg6124-images.html" target="_blank">https://www.gutenberg.org/cache/epub/6124/pg6124-images.html</a> 

Crusoe: <a href="https://www.gutenberg.org/cache/epub/521/pg521-images.html" target="_blank">https://www.gutenberg.org/cache/epub/521/pg521-images.html</a>

The code for this project is available on Github for y'all to use. There, you will find instructions on how to count the words of any .txt file of your choosing. 

Link to GitHub: <a href="https://github.com/emmacarl7/Word-Counter" target="_blank">https://github.com/emmacarl7/Word-Counter</a>


### Count all words

Counts the frequency of all words in *Pamela* and *Robinson Crusoe* and displays the 100 most popular words for each. 

<table>
  <tr>
    <th>Pamela</th>
    <th>Robinson Crusoe</th>
  </tr>

  <tr>
    <td>

```{python}
#| eval: true
#| echo: false
print(f"Total words: {pamela_sum}")
print()
print (pamela_string)
```

</td>
<td>

```{python}
#| eval: true
#| echo: false
print(f"Total words: {crusoe_sum}")
print()
print (crusoe_string)
```    

  </td>
  </tr>
</table>

### Ignore common words

Counts the frequency of all words in *Pamela* and *Robinson Crusoe* excluding words in list of common words. 

**List of common words:** the, and, a, to, of, in, is, you, that, it, he, was, for, on, are, as, with, his, they, at, be, this, have, from, or, one, had, by, but, not, what, all, were, we, when, your, can, said, there, an, each, which, she, do, how, their, if, will, up, other, about, out, many, then, them, these, so, some, her, would, make, like, him, into, time, has, look, two, more, go, see, no, way, could, people, than, first, been, who, oil, its, now, find, long, down, day, did, get, come, made, may, part, me, am, shall, should, very, upon, might, much, such, though, yet, too, any.

<table>
  <tr>
    <th>Pamela</th>
    <th>Robinson Crusoe</th>
  </tr>
  <tr>
    <td>

```{python}
#| eval: true
#| echo: false

print (filtered_pamela_string)
```

</td>
<td>

```{python}
#| eval: true
#| echo: false

print (filtered_crusoe_string)
```    

  </td>
  </tr>
</table>


### Words exclusive to each novel

Displays the 100 most common words in *Pamela* that are not in  *Robinson Crusoe* and vice versa. 

<table>
  <tr>
    <th>Pamela</th>
    <th>Robinson Crusoe</th>
  </tr>

  <tr>
    <td>

```{python}
#| eval: true
#| echo: false
count = 0
for word in pamela_exclusive:
  print(word)
  count += 1

  if count == 100:
    break
```

</td>
<td>

```{python}
#| eval: true
#| echo: false
count = 0
for word in crusoe_exclusive:
  print(word)
  count += 1

  if count == 100:
    break
```    

  </td>
  </tr>
</table>

### Sentiment Analysis (Beta)

Sentiment analysis is a data science technique that involves using natural language processing and machine learning to analyze and determine the sentiment expressed in a piece of text, with categorizations of **positive, negative, and neutral.** 

To do this, I used the **Natural Language Toolkit** (nltk) Python library to analyze each sentence in the text and determine the sentiment of that sentence. In addition, I used nltk's built-in sentiment analysis rules-based tool, VADER **(Valence Aware Dictionary and sEntiment Reasoner).** VADER was specifically designed for sentiment analysis of text that is often encountered in social media, product reviews, and other short texts, so it does not provide an ideal model.

In the future, utilizing custom training data instead of VADER would enhance accuracy by tailoring the analysis to the specific domain of 18th century literature not adequately captured here.

Each sentence in *Pamela* was given a score for positive, neutral, negative, and compound (an overall score). Below are the 15 sentences with the highest negative score, and the 15 sentences with the highest positive score.


```{python}
#| eval: true
#| echo: false

from src.sentiment import sentiment_analysis

print(sentiment_analysis('assets/pamela.txt'))
``` 